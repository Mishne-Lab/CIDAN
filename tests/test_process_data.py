from CIDAN.LSSC.process_data import process_data


def test_process_data():
    process_data(num_threads=1, load_data=True,
                 data_path="/home/sam/Desktop/LSSC-python/input_images" +
                           "/small_dataset.tif",
                 test_images=False,
                 test_output_dir="/data2/Sam/pythonTestEnviroment/output_images/15",
                 image_data=None,
                 total_num_time_steps=4, total_num_spatial_boxes=4, spatial_overlap=40,
                 filter=True, median_filter_size=(1, 3, 3), median_filter=True,
                 z_score=False, slice_stack=False, slice_every=1, slice_start=0,
                 metric="l2", knn=50, accuracy=50, connections=60,
                 num_eig=25, normalize_w_k=2,merge=True,
                          num_rois=100, refinement=True,
                          num_eigen_vector_select=5,
                          max_iter=1000, roi_size_threshold=30,
                          fill_holes=True,
                          elbow_threshold_method=True,
                          elbow_threshold_value=1,
                          eigen_threshold_method=True,
                          eigen_threshold_value=.5,
                          merge_temporal_coef=.01,
                          roi_size_limit=600)
    process_data(num_threads=1, load_data=True,
                 data_path="/home/sam/Desktop/LSSC-python/input_images" +
                           "/small_dataset.tif",
                 test_images=False,
                 test_output_dir="/data2/Sam/pythonTestEnviroment/output_images/15",
                 image_data=None,
                 total_num_time_steps=4, total_num_spatial_boxes=4, spatial_overlap=40,
                 filter=True, median_filter_size=(1, 3, 3), median_filter=True,
                 z_score=True, slice_stack=True, slice_every=1, slice_start=0,
                 metric="l2", knn=50, accuracy=50, connections=60,
                 num_eig=25, normalize_w_k=2, merge=True,
                 num_rois=100, refinement=True,
                 num_eigen_vector_select=5,
                 max_iter=1000, roi_size_threshold=30,
                 fill_holes=True,
                 elbow_threshold_method=False,
                 elbow_threshold_value=1,
                 eigen_threshold_method=False,
                 eigen_threshold_value=.5,
                 merge_temporal_coef=.01,
                 roi_size_limit=600)